{
	"info": {
		"_postman_id": "3c623827-0800-4f75-836c-1382374f5fad",
		"name": "08-21 Automation CA-MarketingHW11",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Create new postal address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if(responseCode.code === 200) {",
							"    tests[\"Backend is available, response code is 200\"] = true;",
							"} else if (responseCode.code === 401) {",
							"    tests[\"Not autorized, Check access token or Log in\"] = false;",
							"} else if (responseCode.code === 403) {",
							"    tests[\"Forbiden\"] = false;",
							"} else if (responseCode.code === 404) {",
							"    tests[\"Not Found. Check you made correct request\"] = false;",
							"} else if (responseCode.code === 422) {",
							"    tests[\"The instance is not valid\"] = false;",
							"} else {",
							"    tests[\"Something went wrong. Check response body\"] = false;",
							"}",
							"",
							"const jsonData = pm.response.json();",
							"pm.environment.set(\"ID\", jsonData.id);",
							"",
							"pm.test(\"ID is correct\", function () {",
							"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"ID\"))",
							"});",
							"",
							"pm.test(\"ID is correct2\", function() {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"ID\"));",
							"});",
							"",
							"pm.test(\"Status 200 OK\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response assertions\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.be.ok;",
							"    pm.response.to.be.json;",
							"})",
							"",
							"",
							"pm.test(\"Response time is less than 1000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"",
							"pm.test(\"Header is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");",
							"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.15.10\");",
							"});",
							"",
							"pm.test(\"Response should be okey to process\", function () {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.not.have.jsonBody(\"error\");",
							"});",
							"",
							"tests[\"Response code is 200 OK\"] = responseCode.code === 200;",
							"tests[\"Response Time is Acceptable\"] = responseTime < 1000;",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.unset(\"ID\");",
							"pm.environment.unset(\"company\");",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "9x5hu-qaGHjX_rlCmNfGS7r4Ul3smNVoo6GGlMXp3_M.eyJpbnN0YW5jZUlkIjoiZjQ2Y2Q1MDItZjcyZi00NGY3LTk2MzgtNWRhMWRlYjBiNGU3IiwiYXBwRGVmSWQiOiIxNTA1Yjc3NS1lODg1LWViMWItYjY2NS0xZTQ4NWQ5YmY5MGUiLCJtZXRhU2l0ZUlkIjoiMjhiNzkzZDYtNTQyNC00MDU4LTgwNDktMDI2YTRkYjAyODJmIiwic2lnbkRhdGUiOiIyMDIxLTEwLTIwVDAzOjU0OjU1Ljk2M1oiLCJ1aWQiOiIzYjQ2YjY3Mi1lOGFkLTRkMzktOTU4Ni0zOTM3MWQ1YTJhNmQiLCJkZW1vTW9kZSI6ZmFsc2UsImFpZCI6ImYzNTczMWZiLTEyYWQtNGYxOC1iZmQ0LWQ0MjhlOTc4MTgzNyIsImJpVG9rZW4iOiJkY2RiNDZkNC1hMzBiLTA0YWYtMTY3MS01ZmNiOTMwMDljYzgiLCJzaXRlT3duZXJJZCI6ImY5MTRmMTFjLWFhYjMtNDUyNy04ZDRlLWJhYjc2MjE0M2E2MCIsImV4cGlyYXRpb25EYXRlIjoiMjAyMS0xMC0yMFQwNzo1NDo1NS45NjNaIiwiaGFzVXNlclJvbGUiOmZhbHNlfQ",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"address\": {\n        \"fullName\": {\n            \"firstName\": \"Van\",\n            \"lastName\": \"Damm\"\n        },\n        \"company\": \"Google-123\",\n        \"taxInfo\": {\n            \"id\": null,\n            \"type\": null\n        },\n        \"addressLine1\": \"4565 Redlands Boulevard\",\n        \"addressLine2\": \"Apt 567\",\n        \"street\": {\n            \"name\": null,\n            \"number\": null\n        },\n        \"city\": \"Perris\",\n        \"country\": \"USA\",\n        \"subdivision\": \"CA\",\n        \"zipCode\": \"92571\",\n        \"phoneNumber\": \"123-456-7890\",\n        \"location\": null\n    },\n    \"setAsDefault\": false\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses"
					]
				}
			},
			"response": []
		},
		{
			"name": "Make default address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if(responseCode.code === 200) {",
							"    tests[\"Backend is available, response code is 200\"] = true;",
							"} else if (responseCode.code === 401) {",
							"    tests[\"Not autorized, Check access token or Log in\"] = false;",
							"} else if (responseCode.code === 403) {",
							"    tests[\"Forbiden\"] = false;",
							"} else if (responseCode.code === 404) {",
							"    tests[\"Not Found. Check you made correct request\"] = false;",
							"} else if (responseCode.code === 422) {",
							"    tests[\"The instance is not valid\"] = false;",
							"} else {",
							"    tests[\"Something went wrong. Check response body\"] = false;",
							"}",
							"",
							"pm.test(\"Response Header is present and correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");",
							"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.15.10\");",
							"});",
							"",
							"tests[\"Response Time is Acceptable\"] = responseTime < 1000;",
							"",
							"pm.test(\"Address has been updated, OK\", function () {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"    pm.response.to.not.have.jsonBody(\"error\");",
							"    pm.response.to.have.jsonBody({});",
							"});",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "9x5hu-qaGHjX_rlCmNfGS7r4Ul3smNVoo6GGlMXp3_M.eyJpbnN0YW5jZUlkIjoiZjQ2Y2Q1MDItZjcyZi00NGY3LTk2MzgtNWRhMWRlYjBiNGU3IiwiYXBwRGVmSWQiOiIxNTA1Yjc3NS1lODg1LWViMWItYjY2NS0xZTQ4NWQ5YmY5MGUiLCJtZXRhU2l0ZUlkIjoiMjhiNzkzZDYtNTQyNC00MDU4LTgwNDktMDI2YTRkYjAyODJmIiwic2lnbkRhdGUiOiIyMDIxLTEwLTIwVDAzOjU0OjU1Ljk2M1oiLCJ1aWQiOiIzYjQ2YjY3Mi1lOGFkLTRkMzktOTU4Ni0zOTM3MWQ1YTJhNmQiLCJkZW1vTW9kZSI6ZmFsc2UsImFpZCI6ImYzNTczMWZiLTEyYWQtNGYxOC1iZmQ0LWQ0MjhlOTc4MTgzNyIsImJpVG9rZW4iOiJkY2RiNDZkNC1hMzBiLTA0YWYtMTY3MS01ZmNiOTMwMDljYzgiLCJzaXRlT3duZXJJZCI6ImY5MTRmMTFjLWFhYjMtNDUyNy04ZDRlLWJhYjc2MjE0M2E2MCIsImV4cGlyYXRpb25EYXRlIjoiMjAyMS0xMC0yMFQwNzo1NDo1NS45NjNaIiwiaGFzVXNlclJvbGUiOmZhbHNlfQ",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": \"{{ID}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/default",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses",
						"default"
					]
				}
			},
			"response": []
		},
		{
			"name": "Show All addresses",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if(responseCode.code === 200) {",
							"    tests[\"Backend is available, response code is 200\"] = true;",
							"} else if (responseCode.code === 401) {",
							"    tests[\"Not autorized, Check access token or Log in\"] = false;",
							"} else if (responseCode.code === 403) {",
							"    tests[\"Forbiden\"] = false;",
							"} else if (responseCode.code === 404) {",
							"    tests[\"Not Found. Check you made correct request\"] = false;",
							"} else if (responseCode.code === 422) {",
							"    tests[\"The instance is not valid\"] = false;",
							"} else {",
							"    tests[\"Something went wrong. Check response body\"] = false;",
							"}",
							"",
							"switch (responseCode.code) {",
							"    case 200:",
							"        tests[\"200 Ok. The request has succeeded.\"] = true;",
							"        break;",
							"    case 404:",
							"        tests[\"404 Not Foudd.\"] = false;",
							"        break;",
							"    case 400:",
							"        tests[\"400 Bad Request.\"] = false;",
							"        break;",
							"    case 401:",
							"        tests[\"401 Unautorized.\"] = false;",
							"        break;",
							"    case 500:",
							"        tests[\"500 Internal Server Error.\"] = false;",
							"        break;",
							"    case 503:",
							"        tests[\"503 Service unavailable.\"] = false;",
							"        break;",
							"    case 502:",
							"        tests[\"502 bad gateway.\"] = false;",
							"        break;",
							"    case 599:",
							"        tests[\"Network connect timeout error.\"] = false;",
							"        break;",
							"    case 408:",
							"        tests[\"408 Request timedout.\"] = false;",
							"        break;",
							"    default:",
							"        tests[\"Sorry, we are out of\", responseCode.code] = false;",
							"        break;",
							"}",
							"",
							"pm.test(\"Response should be okey to process\", function () {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"    pm.response.to.not.have.jsonBody(\"error\");",
							"});",
							"",
							"pm.test(\"New ID is in response\", function () {",
							"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"ID\"));",
							"});",
							"",
							"pm.test(\"Response Header is present and correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");",
							"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.15.10\");",
							"});",
							"",
							"pm.test(\"Response Time is less than 1000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"",
							"pm.test(\"Response Size is less than 10KB\", function () {",
							"    pm.expect(pm.response.responseSize).to.be.below(10240);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "9x5hu-qaGHjX_rlCmNfGS7r4Ul3smNVoo6GGlMXp3_M.eyJpbnN0YW5jZUlkIjoiZjQ2Y2Q1MDItZjcyZi00NGY3LTk2MzgtNWRhMWRlYjBiNGU3IiwiYXBwRGVmSWQiOiIxNTA1Yjc3NS1lODg1LWViMWItYjY2NS0xZTQ4NWQ5YmY5MGUiLCJtZXRhU2l0ZUlkIjoiMjhiNzkzZDYtNTQyNC00MDU4LTgwNDktMDI2YTRkYjAyODJmIiwic2lnbkRhdGUiOiIyMDIxLTEwLTIwVDAzOjU0OjU1Ljk2M1oiLCJ1aWQiOiIzYjQ2YjY3Mi1lOGFkLTRkMzktOTU4Ni0zOTM3MWQ1YTJhNmQiLCJkZW1vTW9kZSI6ZmFsc2UsImFpZCI6ImYzNTczMWZiLTEyYWQtNGYxOC1iZmQ0LWQ0MjhlOTc4MTgzNyIsImJpVG9rZW4iOiJkY2RiNDZkNC1hMzBiLTA0YWYtMTY3MS01ZmNiOTMwMDljYzgiLCJzaXRlT3duZXJJZCI6ImY5MTRmMTFjLWFhYjMtNDUyNy04ZDRlLWJhYjc2MjE0M2E2MCIsImV4cGlyYXRpb25EYXRlIjoiMjAyMS0xMC0yMFQwNzo1NDo1NS45NjNaIiwiaGFzVXNlclJvbGUiOmZhbHNlfQ",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses"
					]
				}
			},
			"response": []
		},
		{
			"name": "Show Specific address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if(responseCode.code === 200) {",
							"    tests[\"Backend is available, response code is 200\"] = true;",
							"} else if (responseCode.code === 401) {",
							"    tests[\"Not autorized, Check access token or Log in\"] = false;",
							"} else if (responseCode.code === 403) {",
							"    tests[\"Forbiden\"] = false;",
							"} else if (responseCode.code === 404) {",
							"    tests[\"Not Found. Check you made correct request\"] = false;",
							"} else if (responseCode.code === 422) {",
							"    tests[\"The instance is not valid\"] = false;",
							"} else {",
							"    tests[\"Something went wrong. Check response body\"] = false;",
							"}",
							"",
							"pm.test(\"Response should be okey to process\", function () {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"    pm.response.to.not.have.jsonBody(\"error\");",
							"});",
							"",
							"pm.test(\"ID is correct\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.address.id).to.eql(environment.ID);",
							"});",
							"",
							"pm.test(\"ID is correct\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.address.id).to.eql(pm.environment.get(\"ID\"));",
							"});",
							"",
							"pm.test(\"Phone Number is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.address.phoneNumber).to.eql(\"123-456-7890\");",
							"});",
							"",
							"pm.test(\"Response body should be in the correct format\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.address).to.be.a(\"object\");",
							"    pm.expect(jsonData.address.id).to.be.a(\"string\");",
							"    pm.expect(jsonData.address.fullName).to.be.a(\"object\");",
							"    pm.expect(jsonData.address.fullName.firstName).to.be.a(\"string\");",
							"    pm.expect(jsonData.address.fullName.lastName).to.be.a(\"string\");",
							"    pm.expect(jsonData.address.country).to.be.a(\"string\");",
							"    pm.expect(jsonData.address.city).to.be.a(\"string\");",
							"    pm.expect(jsonData.address.zipCode).to.be.a(\"string\");",
							"    pm.expect(jsonData.address.phoneNumber).to.be.a(\"string\");",
							"    pm.expect(jsonData.isDefaultAddress).to.be.a(\"Boolean\");",
							"});",
							"",
							"pm.test(\"Response Header is present and correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");",
							"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.15.10\");",
							"});",
							"",
							"",
							"",
							"",
							"    ",
							"",
							"",
							"",
							"   ",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "9x5hu-qaGHjX_rlCmNfGS7r4Ul3smNVoo6GGlMXp3_M.eyJpbnN0YW5jZUlkIjoiZjQ2Y2Q1MDItZjcyZi00NGY3LTk2MzgtNWRhMWRlYjBiNGU3IiwiYXBwRGVmSWQiOiIxNTA1Yjc3NS1lODg1LWViMWItYjY2NS0xZTQ4NWQ5YmY5MGUiLCJtZXRhU2l0ZUlkIjoiMjhiNzkzZDYtNTQyNC00MDU4LTgwNDktMDI2YTRkYjAyODJmIiwic2lnbkRhdGUiOiIyMDIxLTEwLTIwVDAzOjU0OjU1Ljk2M1oiLCJ1aWQiOiIzYjQ2YjY3Mi1lOGFkLTRkMzktOTU4Ni0zOTM3MWQ1YTJhNmQiLCJkZW1vTW9kZSI6ZmFsc2UsImFpZCI6ImYzNTczMWZiLTEyYWQtNGYxOC1iZmQ0LWQ0MjhlOTc4MTgzNyIsImJpVG9rZW4iOiJkY2RiNDZkNC1hMzBiLTA0YWYtMTY3MS01ZmNiOTMwMDljYzgiLCJzaXRlT3duZXJJZCI6ImY5MTRmMTFjLWFhYjMtNDUyNy04ZDRlLWJhYjc2MjE0M2E2MCIsImV4cGlyYXRpb25EYXRlIjoiMjAyMS0xMC0yMFQwNzo1NDo1NS45NjNaIiwiaGFzVXNlclJvbGUiOmZhbHNlfQ",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/?id={{ID}}",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses",
						""
					],
					"query": [
						{
							"key": "id",
							"value": "{{ID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Modify existing address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if(responseCode.code === 200) {",
							"    tests[\"Backend is available, response code is 200\"] = true;",
							"} else if (responseCode.code === 401) {",
							"    tests[\"Not autorized, Check access token or Log in\"] = false;",
							"} else if (responseCode.code === 403) {",
							"    tests[\"Forbiden\"] = false;",
							"} else if (responseCode.code === 404) {",
							"    tests[\"Not Found. Check you made correct request\"] = false;",
							"} else if (responseCode.code === 422) {",
							"    tests[\"The instance is not valid\"] = false;",
							"} else {",
							"    tests[\"Something went wrong. Check response body\"] = false;",
							"}",
							"",
							"pm.test(\"Response Time is less than 1000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"",
							"pm.test(\"Response Header is present and correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");",
							"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.15.10\");",
							"});",
							"",
							"pm.test(\"Address has been updated, OK\", function () {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"    pm.response.to.not.have.jsonBody(\"error\");",
							"    pm.response.to.have.jsonBody({});",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"company\", \"Google-\" + new Date().getTime());"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Authorization",
						"value": "9x5hu-qaGHjX_rlCmNfGS7r4Ul3smNVoo6GGlMXp3_M.eyJpbnN0YW5jZUlkIjoiZjQ2Y2Q1MDItZjcyZi00NGY3LTk2MzgtNWRhMWRlYjBiNGU3IiwiYXBwRGVmSWQiOiIxNTA1Yjc3NS1lODg1LWViMWItYjY2NS0xZTQ4NWQ5YmY5MGUiLCJtZXRhU2l0ZUlkIjoiMjhiNzkzZDYtNTQyNC00MDU4LTgwNDktMDI2YTRkYjAyODJmIiwic2lnbkRhdGUiOiIyMDIxLTEwLTIwVDAzOjU0OjU1Ljk2M1oiLCJ1aWQiOiIzYjQ2YjY3Mi1lOGFkLTRkMzktOTU4Ni0zOTM3MWQ1YTJhNmQiLCJkZW1vTW9kZSI6ZmFsc2UsImFpZCI6ImYzNTczMWZiLTEyYWQtNGYxOC1iZmQ0LWQ0MjhlOTc4MTgzNyIsImJpVG9rZW4iOiJkY2RiNDZkNC1hMzBiLTA0YWYtMTY3MS01ZmNiOTMwMDljYzgiLCJzaXRlT3duZXJJZCI6ImY5MTRmMTFjLWFhYjMtNDUyNy04ZDRlLWJhYjc2MjE0M2E2MCIsImV4cGlyYXRpb25EYXRlIjoiMjAyMS0xMC0yMFQwNzo1NDo1NS45NjNaIiwiaGFzVXNlclJvbGUiOmZhbHNlfQ",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"address\": {\n        \"id\": \"{{ID}}\",\n        \"fullName\": {\n            \"firstName\": \"Van\",\n            \"lastName\": \"Damm\"\n        },\n        \"company\": \"{{company}}\",\n        \"taxInfo\": {\n            \"id\": null,\n            \"type\": null\n        },\n        \"addressLine1\": \"4565 Redlands Boulevard\",\n        \"addressLine2\": \"Apt 567\",\n        \"street\": {\n            \"name\": null,\n            \"number\": null\n        },\n        \"city\": \"Loma Linda\",\n        \"country\": \"USA\",\n        \"subdivision\": \"CA\",\n        \"zipCode\": \"92571\",\n        \"phoneNumber\": \"123-456-7890\",\n        \"location\": null\n    },\n    \"setAsDefault\": true,\n    \"fieldMask\": {\n        \"paths\": [\n            \"fullName.firstName\",\n            \"fullName.lastName\",\n            \"company\",\n            \"addressLine1\",\n            \"addressLine2\",\n            \"city\",\n            \"country\",\n            \"subdivision\",\n            \"zipCode\",\n            \"phoneNumber\",\n            \"setAsDefault\"\n        ]\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/?id={{ID}}",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses",
						""
					],
					"query": [
						{
							"key": "id",
							"value": "{{ID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Check Updated Specific address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if(responseCode.code === 200) {",
							"    tests[\"Backend is available, response code is 200\"] = true;",
							"} else if (responseCode.code === 401) {",
							"    tests[\"Not autorized, Check access token or Log in\"] = false;",
							"} else if (responseCode.code === 403) {",
							"    tests[\"Forbiden\"] = false;",
							"} else if (responseCode.code === 404) {",
							"    tests[\"Not Found. Check you made correct request\"] = false;",
							"} else if (responseCode.code === 422) {",
							"    tests[\"The instance is not valid\"] = false;",
							"} else {",
							"    tests[\"Something went wrong. Check response body\"] = false;",
							"}",
							"",
							"pm.test(\"company is Google\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"company\", pm.environment.get(\"company\"));",
							"});",
							"",
							"pm.test(\"Company is Google\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"company\", pm.environment.get(\"company\"));",
							"});",
							"",
							"pm.test(\"Company is current\", function () {",
							"    var jsonData = JSON.parse(responseBody);",
							"    jsonData.company === (pm.environment.get(\"company\"));",
							"});",
							"",
							"pm.test(\"Company is correct again\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.address.company).to.eql(pm.environment.get(\"company\"));",
							"});",
							"",
							"pm.test(\"Response should be okey to process\", function () {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"    pm.response.to.not.have.jsonBody(\"error\");",
							"});",
							"",
							"pm.test(\"Response body should be in the correct format\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.address).to.be.a(\"object\");",
							"    pm.expect(jsonData.address.id).to.be.a(\"string\");",
							"    pm.expect(jsonData.address.fullName).to.be.a(\"object\");",
							"    pm.expect(jsonData.address.fullName.firstName).to.be.a(\"string\");",
							"    pm.expect(jsonData.address.fullName.lastName).to.be.a(\"string\");",
							"    pm.expect(jsonData.address.country).to.be.a(\"string\");",
							"    pm.expect(jsonData.address.city).to.be.a(\"string\");",
							"    pm.expect(jsonData.address.zipCode).to.be.a(\"string\");",
							"    pm.expect(jsonData.address.company).to.be.a(\"string\");",
							"    pm.expect(jsonData.address.phoneNumber).to.be.a(\"string\");",
							"    pm.expect(jsonData.isDefaultAddress).to.be.a(\"Boolean\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "9x5hu-qaGHjX_rlCmNfGS7r4Ul3smNVoo6GGlMXp3_M.eyJpbnN0YW5jZUlkIjoiZjQ2Y2Q1MDItZjcyZi00NGY3LTk2MzgtNWRhMWRlYjBiNGU3IiwiYXBwRGVmSWQiOiIxNTA1Yjc3NS1lODg1LWViMWItYjY2NS0xZTQ4NWQ5YmY5MGUiLCJtZXRhU2l0ZUlkIjoiMjhiNzkzZDYtNTQyNC00MDU4LTgwNDktMDI2YTRkYjAyODJmIiwic2lnbkRhdGUiOiIyMDIxLTEwLTIwVDAzOjU0OjU1Ljk2M1oiLCJ1aWQiOiIzYjQ2YjY3Mi1lOGFkLTRkMzktOTU4Ni0zOTM3MWQ1YTJhNmQiLCJkZW1vTW9kZSI6ZmFsc2UsImFpZCI6ImYzNTczMWZiLTEyYWQtNGYxOC1iZmQ0LWQ0MjhlOTc4MTgzNyIsImJpVG9rZW4iOiJkY2RiNDZkNC1hMzBiLTA0YWYtMTY3MS01ZmNiOTMwMDljYzgiLCJzaXRlT3duZXJJZCI6ImY5MTRmMTFjLWFhYjMtNDUyNy04ZDRlLWJhYjc2MjE0M2E2MCIsImV4cGlyYXRpb25EYXRlIjoiMjAyMS0xMC0yMFQwNzo1NDo1NS45NjNaIiwiaGFzVXNlclJvbGUiOmZhbHNlfQ",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/?id={{ID}}",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses",
						""
					],
					"query": [
						{
							"key": "id",
							"value": "{{ID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Specific address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if(responseCode.code === 200) {",
							"    tests[\"Backend is available, response code is 200\"] = true;",
							"} else if (responseCode.code === 401) {",
							"    tests[\"Not autorized, Check access token or Log in\"] = false;",
							"} else if (responseCode.code === 403) {",
							"    tests[\"Forbiden\"] = false;",
							"} else if (responseCode.code === 404) {",
							"    tests[\"Not Found. Check you made correct request\"] = false;",
							"} else if (responseCode.code === 422) {",
							"    tests[\"The instance is not valid\"] = false;",
							"} else {",
							"    tests[\"Something went wrong. Check response body\"] = false;",
							"}",
							"",
							"pm.test(\"Response Time is less than 1000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"",
							"pm.test(\"Response Size is less than 1000 B\", function () {",
							"    pm.expect(pm.response.responseSize).to.be.below(1000);",
							"});",
							"",
							"pm.test(\"Response Header is present and correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");",
							"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.15.10\");",
							"});",
							"",
							"pm.test(\"Order has been deleted, OK\", function () {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"    pm.response.to.be.ok;",
							"    pm.response.to.be.an(\"object\");",
							"    pm.response.to.not.have.jsonBody(\"error\");",
							"    pm.response.to.have.jsonBody({});",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "9x5hu-qaGHjX_rlCmNfGS7r4Ul3smNVoo6GGlMXp3_M.eyJpbnN0YW5jZUlkIjoiZjQ2Y2Q1MDItZjcyZi00NGY3LTk2MzgtNWRhMWRlYjBiNGU3IiwiYXBwRGVmSWQiOiIxNTA1Yjc3NS1lODg1LWViMWItYjY2NS0xZTQ4NWQ5YmY5MGUiLCJtZXRhU2l0ZUlkIjoiMjhiNzkzZDYtNTQyNC00MDU4LTgwNDktMDI2YTRkYjAyODJmIiwic2lnbkRhdGUiOiIyMDIxLTEwLTIwVDAzOjU0OjU1Ljk2M1oiLCJ1aWQiOiIzYjQ2YjY3Mi1lOGFkLTRkMzktOTU4Ni0zOTM3MWQ1YTJhNmQiLCJkZW1vTW9kZSI6ZmFsc2UsImFpZCI6ImYzNTczMWZiLTEyYWQtNGYxOC1iZmQ0LWQ0MjhlOTc4MTgzNyIsImJpVG9rZW4iOiJkY2RiNDZkNC1hMzBiLTA0YWYtMTY3MS01ZmNiOTMwMDljYzgiLCJzaXRlT3duZXJJZCI6ImY5MTRmMTFjLWFhYjMtNDUyNy04ZDRlLWJhYjc2MjE0M2E2MCIsImV4cGlyYXRpb25EYXRlIjoiMjAyMS0xMC0yMFQwNzo1NDo1NS45NjNaIiwiaGFzVXNlclJvbGUiOmZhbHNlfQ",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/?id={{ID}}",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses",
						""
					],
					"query": [
						{
							"key": "id",
							"value": "{{ID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Deleted address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if(responseCode.code === 200) {",
							"    tests[\"Backend is available, response code is 200\"] = false;",
							"} else if (responseCode.code === 401) {",
							"    tests[\"Not autorized, Check acces token or Log in\"] = true;",
							"} else if (responseCode.code === 400) {",
							"    tests[\"Bad Request 400 is OK\"] = true;",
							"} else if (responseCode.code === 403) {",
							"    tests[\"Forbiden\"] = true;",
							"} else if (responseCode.code === 404) {",
							"    tests[\"Not Found. Check you made correct request\"] = true;",
							"} else if (responseCode.code === 422) {",
							"    tests[\"The instance is not valid\"] = true;",
							"} else {",
							"    tests[\"Something went wrong. Check response body\"] = true;",
							"}",
							"",
							"pm.test(\"Status code is 400, as expected\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Response Time is less than 1000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"",
							"pm.test(\"Response Size is less than 1000 B\", function () {",
							"    pm.expect(pm.response.responseSize).to.be.below(1000);",
							"});",
							"",
							"pm.test(\"Content-Tape is present and correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
							"});",
							"pm.test(\"Content_Length is present and correct\", function () {",
							"    pm.response.to.have.header(\"Content-Length\", \"191\");",
							"});   ",
							"pm.test(\"Connection is present and correct\", function () {",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");",
							"});",
							"pm.test(\"Server is present and correct\", function () {",
							"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.15.10\");",
							"});",
							"",
							"pm.test(\"Order can't be deleted, nonexist. As expected\", function () {",
							"    pm.response.to.be.error;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"    pm.response.to.be.an(\"object\")",
							"    pm.response.to.not.have.jsonBody(\"error\");",
							"});",
							"",
							"pm.test(\"Masage is iclude previously deleted ID\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"message\", (pm.environment.get(\"ID\")));",
							"});",
							"",
							"pm.test(\"Masage deleted ID is correct\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.details.cant_find).to.eql(\"address_id: \" + pm.environment.get(\"ID\"));",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "9x5hu-qaGHjX_rlCmNfGS7r4Ul3smNVoo6GGlMXp3_M.eyJpbnN0YW5jZUlkIjoiZjQ2Y2Q1MDItZjcyZi00NGY3LTk2MzgtNWRhMWRlYjBiNGU3IiwiYXBwRGVmSWQiOiIxNTA1Yjc3NS1lODg1LWViMWItYjY2NS0xZTQ4NWQ5YmY5MGUiLCJtZXRhU2l0ZUlkIjoiMjhiNzkzZDYtNTQyNC00MDU4LTgwNDktMDI2YTRkYjAyODJmIiwic2lnbkRhdGUiOiIyMDIxLTEwLTIwVDAzOjU0OjU1Ljk2M1oiLCJ1aWQiOiIzYjQ2YjY3Mi1lOGFkLTRkMzktOTU4Ni0zOTM3MWQ1YTJhNmQiLCJkZW1vTW9kZSI6ZmFsc2UsImFpZCI6ImYzNTczMWZiLTEyYWQtNGYxOC1iZmQ0LWQ0MjhlOTc4MTgzNyIsImJpVG9rZW4iOiJkY2RiNDZkNC1hMzBiLTA0YWYtMTY3MS01ZmNiOTMwMDljYzgiLCJzaXRlT3duZXJJZCI6ImY5MTRmMTFjLWFhYjMtNDUyNy04ZDRlLWJhYjc2MjE0M2E2MCIsImV4cGlyYXRpb25EYXRlIjoiMjAyMS0xMC0yMFQwNzo1NDo1NS45NjNaIiwiaGFzVXNlclJvbGUiOmZhbHNlfQ",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/?id={{ID}}",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses",
						""
					],
					"query": [
						{
							"key": "id",
							"value": "{{ID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Check Deleted Specific address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if(responseCode.code === 200) {",
							"    tests[\"Backend is available, response code is 200\"] = false;",
							"} else if (responseCode.code === 401) {",
							"    tests[\"Not autorized, Check acces token or Log in\"] = true;",
							"} else if (responseCode.code === 400) {",
							"    tests[\"Bad Request 400 is OK\"] = true;",
							"} else if (responseCode.code === 403) {",
							"    tests[\"Forbiden\"] = true;",
							"} else if (responseCode.code === 404) {",
							"    tests[\"Not Found. Check you made correct request\"] = true;",
							"} else if (responseCode.code === 422) {",
							"    tests[\"The instance is not valid\"] = true;",
							"} else {",
							"    tests[\"Something went wrong. Check response body\"] = true;",
							"}",
							"",
							"pm.test(\"Status code is 400, as expected\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Response Time is less than 1000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"",
							"pm.test(\"Response Size is less than 1000 B\", function () {",
							"    pm.expect(pm.response.responseSize).to.be.below(1000);",
							"});",
							"",
							"pm.test(\"Content-Tape is present and correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
							"});",
							"pm.test(\"Content_Length is present and correct\", function () {",
							"    pm.response.to.have.header(\"Content-Length\", \"191\");",
							"});   ",
							"pm.test(\"Connection is present and correct\", function () {",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");",
							"});",
							"pm.test(\"Server is present and correct\", function () {",
							"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.15.10\");",
							"});",
							"",
							"pm.test(\"Order can't be deleted, nonexist. As expected\", function () {",
							"    pm.response.to.be.error;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"    pm.response.to.be.an(\"object\")",
							"    pm.response.to.not.have.jsonBody(\"error\");",
							"});",
							"",
							"pm.test(\"Masage is iclude previously deleted ID\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"message\", (pm.environment.get(\"ID\")));",
							"});",
							"",
							"pm.test(\"Masage deleted ID is correct\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.details.cant_find).to.eql(\"address_id: \" + pm.environment.get(\"ID\"));",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "9x5hu-qaGHjX_rlCmNfGS7r4Ul3smNVoo6GGlMXp3_M.eyJpbnN0YW5jZUlkIjoiZjQ2Y2Q1MDItZjcyZi00NGY3LTk2MzgtNWRhMWRlYjBiNGU3IiwiYXBwRGVmSWQiOiIxNTA1Yjc3NS1lODg1LWViMWItYjY2NS0xZTQ4NWQ5YmY5MGUiLCJtZXRhU2l0ZUlkIjoiMjhiNzkzZDYtNTQyNC00MDU4LTgwNDktMDI2YTRkYjAyODJmIiwic2lnbkRhdGUiOiIyMDIxLTEwLTIwVDAzOjU0OjU1Ljk2M1oiLCJ1aWQiOiIzYjQ2YjY3Mi1lOGFkLTRkMzktOTU4Ni0zOTM3MWQ1YTJhNmQiLCJkZW1vTW9kZSI6ZmFsc2UsImFpZCI6ImYzNTczMWZiLTEyYWQtNGYxOC1iZmQ0LWQ0MjhlOTc4MTgzNyIsImJpVG9rZW4iOiJkY2RiNDZkNC1hMzBiLTA0YWYtMTY3MS01ZmNiOTMwMDljYzgiLCJzaXRlT3duZXJJZCI6ImY5MTRmMTFjLWFhYjMtNDUyNy04ZDRlLWJhYjc2MjE0M2E2MCIsImV4cGlyYXRpb25EYXRlIjoiMjAyMS0xMC0yMFQwNzo1NDo1NS45NjNaIiwiaGFzVXNlclJvbGUiOmZhbHNlfQ",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/?id={{ID}}",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses",
						""
					],
					"query": [
						{
							"key": "id",
							"value": "{{ID}}"
						}
					]
				}
			},
			"response": []
		}
	]
}